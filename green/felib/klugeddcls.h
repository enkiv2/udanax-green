/* Copyright © 1979-1999 Udanax.com. All rights reserved.

* This code is licensed under the terms of The Udanax Open-Source License, 
* which contains precisely the terms of the X11 License.  The full text of 
* The Udanax Open-Source License can be found in the distribution in the file 
* license.html.  If this file is absent, a copy can be found at 
* http://udanax.xanadu.com/license.html and http://www.udanax.com/license.html
*/
/***************************************************
  Copyright (c) 1987 Xanadu Operating Company
  XU.87.1 Frontend Source Code:  klugeddcls.h
***************************************************/

#undef FPROTO
#ifdef FPROTO 

/*void movmem(char *,char *,unsigned);*/*/
void putf(char *,...);
void ffree(char *);
void appendvmtypethingtolist(vmthingthing *,vmthingtype *);
void rejuvinate(vmthingtype *);
void removevmtypethingfromlist(vmthingtype *);
void insertvmtypethinginlist(vmthingtype *,vmthingtype *);
void putinvmlist(vmthingtype *);
void removefromvmlist(vmthingtype *);
void memclear(char *,unsigned);
 nat diff(nat,nat);

#else

/*void movmem();*/
void putf();
void appendvmtypethingtolist();
void rejuvinate();
void ffree();
void removevmtypethingfromlist();
void insertvmtypethinginlist();
void putinvmlist();
void removefromvmlist();
void memclear();
 nat diff();

#endif


bool charspansarecontiguous();
bool comparestrings();
bool dotaketumbler();
bool eatchar();
bool findcommonspans();
bool intersectspans();
bool issomeoneschild();
bool negotiateprotocol();
bool openenough();
bool retrievedocendsets();
bool takeaddress();
bool takeaddressset();
bool takecorrespondenceset();
bool takecreatelink();
bool takecreatenewdocument();
bool takecreatenewversion();
bool takefinddocscontaining();
bool takefindlinksfromtothree();
bool takefindnextnlinksfromto();
bool takefindnumoflinksfromto();
bool takefollowlink();
bool takenum();
bool takenumber();
bool takeopen();
bool takeprotocol();
bool takeretrievedocvspan();
bool takeretrievedocvspanset();
bool takeretrieveendsets();
bool takeretrievev();
bool takeshowrelationof2versions();
bool takesmalltumbler();
bool takespan();
bool takespanset();
bool takespec();
bool takespecset();
bool taketdigit();
bool taketext();
bool taketumbler();
bool takevstuff();
bool tumblereq();
bool validallocthing();
char * malloc();
char * talloc();
char pullc();
charspantype * charspanalloc();
charspantype *newcharspaninvm();
docrangetype * docrangealloc();
documenttype * documentalloc();
documenttype * finddocumentinvmlist();
documenttype *putdocumentinvm();
long findnlintext();
long lastdigitintumbler();
long tumblerintdiff();
med * taskalloc();
med abscmp();
med abscmpsmall();
med checkalloc();
med findbottomfield();
med findlastplace();
med firstofparalleltextface();
med grabspec();
med ncharsinspec();
med retrievetextsize();
med smalltumblercmp();
med spanvsacmp();
med speccmp();
med statusofalloc();
med tumblercmp();
med validallocthinge();
nat * ealloc();
nat * falloc();
nat fegetc();
spantype * findlastspaninspec();
spantype * spanalloc();
spectype * specalloc();
spectype * specspanalloc();
tdigit getcontentoflastplace();
tdigit getcontentofsmallbottomfield();
tumbler openinbackend();
tumbler possiblyopen();
tumbleritemtype * tumbleritemalloc();
vmthingtype * nthiteminlist();
void absadd();
void adjustendsetlist();
void baderror();
void beep();
void beheadtumbler();
void changedocument();
void changedocument2();
void changefromset();
void changetempendset();
void changetoset();
void charspanfree();
void checkstack();
void clearautoxoff();
void cleardocid();
void cleartempendsets();
void clearvdisplacement();
void closeupshop();
void convertspectorelatedspec();
void cooked();
void copy();
void copyspanset();
void copyspecintovposition();
void copyspecset();
void copystringwithoutwhitespace();
void copyvpositionintospec();
void createdocument();
void createfootnote();
void createlink();
void createlinkinbackend();
void createnewdocumentinbackend();
void createnewversioninbackend();
void createversion();
void curlupanddye();
void delete();
void deletefrombackend();
void deletespecfrombe();
void deletetextfromdocumentinvm();
void displaymaskfree();
void docrangefree();
void documentfree();
void dosendtumbler();
void dumpcharspan();
void dumpcharspanset();
void dumpcorrespondence();
void dumpcorrespondenceset();
void dumpcutseq();
void dumpdisplaymask();
void dumpdocument();
void dumprequest();
void dumpsmalltumbler();
void dumpspan();
void dumpspanset();
void dumpspec();
void dumpspecset();
void dumptumbler();
void dumptumbleritem();
void dumptumbleritemset();
void dumpvmthing();
void error();
void feputc();
void feputstring();
void findcomonspecset();
void findcorrectlink();
void finddocscontaininginbackend();
void findlinkset();
void findlinkspecset();
void findlinktype();
void findnextendset();
void findnextendsetafterspec();
void findspecspaninfromandtosetswithlowestvsa();
void fixvsasforrestofcharspansindocument();
void freecorrespondencelist();
void freestringlist();
void gerror();
void grabspecwithouttext();
void init();
void inittask();
void initterm();
void insertcharactersbeforespecifiedposition();
void inserttextinbackend();
void inserttextincharspanindocument();
void leave();
void makecharspanintotext();
void makedocvsa();
void maketempthreeset();
void mov2_abs();
void moveandflipcorrespondenceset();
void paralleltextface();
void possiblyopenfromspec();
void prefixtumbler();
void printblanks();
void prompt();
void pullblock();
void pushc();
void putindexdocumentonstack();
void quit();
void reap();
void rearrange();
void rearrangeinbackend();
void retrieveendsetfrombackend();
void retrieveendsetswithinspecsetfrombackend();
void retrievefrombackend();
void retrievelinksetfrombackend();
void returnfromstack();
void returnfromstack2();
void reversecharacter();
void sendaccount();
void sendappend();
void sendcopy();
void sendcreatelink();
void sendcreatenewdocument();
void sendcreatenewversion();
void senddeletevspan();
void senddiskexit();
void senddocrange();
void senddocrangeset();
void sendfinddocscontaining();
void sendfindlinksfromtothree();
void sendfindnextnlinksfromtothree();
void sendfindnumoflinksfromtothree();
void sendfollowlink();
void sendinsert();
void sendlinkrestriction();
void sendnorestriction();
void sendnum();
void sendnumber();
void sendprotocol();
void sendrearrange();
void sendrequestbuffer();
void sendretrievedocvspan();
void sendretrievedocvspanset();
void sendretrieveendsets();
void sendretrievev();
void sendsetdebug();
void sendshowrelationof2versions();
void sendsmalltumbler();
void sendspan();
void sendspanset();
void sendspec();
void sendspecset();
void sendtext();
void sendtextset();
void sendtumbler();
void setautoxoff();
void showlinks();
void showrelationof2versionsinbackend();
void smalltumblerclear();
void spanfree();
void specfree();
void splitspan();
void strongsub();
void tellbackendtoquit();
void tfree();
void tumbleradd();
void tumbleralloc();
void tumblerclear();
void tumblercopy();
void tumblerfree();
void tumblerincrement();
void tumblerjustify();
void tumblermax();
void tumblermin();
void tumblersub();
void tumblertruncate();
void updateendsetlist();
void vmfree();
void weaksub();
void zdumptumbler();
