/* Copyright © 1979-1999 Udanax.com. All rights reserved.

* This code is licensed under the terms of The Udanax Open-Source License, 
* which contains precisely the terms of the X11 License.  The full text of 
* The Udanax Open-Source License can be found in the distribution in the file 
* license.html.  If this file is absent, a copy can be found at 
* http://udanax.xanadu.com/license.html and http://www.udanax.com/license.html
*/
/***************************************************
  Copyright (c) 1987 Xanadu Operating Company
  XU.87.1 Frontend Source Code:  klugeddcls.h
***************************************************/

#undef FPROTO
#ifdef FPROTO 

/*void movmem(char *,char *,unsigned);*/*/
void putf(char *,...);
void ffree(char *);
void appendvmtypethingtolist(vmthingthing *,vmthingtype *);
void rejuvinate(vmthingtype *);
void removevmtypethingfromlist(vmthingtype *);
void insertvmtypethinginlist(vmthingtype *,vmthingtype *);
void putinvmlist(vmthingtype *);
void removefromvmlist(vmthingtype *);
void memclear(char *,unsigned);
  nat diff(nat,nat);

#else

/*void movmem();*/
void putf();
void appendvmtypethingtolist();
void rejuvinate();
void ffree();
void removevmtypethingfromlist();
void insertvmtypethinginlist();
void putinvmlist();
void removefromvmlist();
void memclear();
  nat diff();

#endif

med checkalloc();
void checkstack();
med validallocthinge();
bool validallocthing();
nat * falloc();
med statusofalloc();
bool iscommand();
void setupcommandstruct();
documenttype * finddocumentinvmlist();
void compare();
void compare2();
void changecurrentwindowdimensions();
void compareviewspecs();
void moveandflipcorrespondenceset();
bool iscursorcontrol();
void accumulatecursorcontrol();
void zerooutcursorcontrol();
void fixrequeststruct();
void incrementrequeststruct();
void makecut();
void clearcuts();
void clearcutsfromview();
void updatecutseq();
bool completecutseq();
void displaycuts();
void setglorpfsforcutsinwindow();
void insertlineattop();
void insertlineinwindow();
void insertlineatbottom();
void fixglorpfsincurrentwindow();
void fixglorpfsinwindow();
void displayithlineinwindow();
void displayfilledithlineinwindow();
void dumpsmalltumbler();
void dumpcutseq();
void dumptumbler();
void dumpvmthing();
void dumpcorrespondenceset();
void dumpcorrespondence();
void dumptumbleritemset();
void dumptumbleritem();
void dumpspecset();
void dumpspec();
void dumpspanset();
void dumpspan();
void dumpdocument();
void dumpcharspanset();
void dumpcharspan();
void dumpdisplaymask();
void dumprequest();
void announce();
void leave();
void insertanddeletechar();
void displayinsertanddeletechar();
void insertcharactersbeforespecifiedposition();
void fixwindowdisplay();
med windowlinelength();
void pullupleftmargins();
void pushdownleftmargins();
void incrementrestofleftmargins();
void deletespecfrombe();
void rearrange();
void delete();
void copy();
void createfootnote();
void createdocument();
void updateendsetlist();
void changetempendset();
void cleartempendsets();
med findspecfromcursorposition();
void findspecfromcursorpositionoffsetandlength();
void makedocvsa();
unsigned long addressisonthisline();
void baderror();
void clearwindowgraphically();
void determinegraphicextentofpsudowindow();
void sunhline();
void erasehline();
void drawhlinesun();
void sunvline();
void erasevline();
void drawvlinesun();
void plotlineundercharacter();
void reversecharacter();
void getpositiontodrawline();
void drawcharacterunderline();
void clearwindowgraphically();
void sunvline();
void sunhline();
void plotlineundercharacter();
void drw2_abs();
void mov2_abs();
void reversecharacter();
bool eatchar();
bool takenum();
bool takenumber();
bool taketumbler();
bool takesmalltumbler();
bool dotaketumbler();
bool taketdigit();
bool takespecset();
bool takespec();
bool takespanset();
bool takeaddressset();
bool takeaddress();
bool takespan();
bool taketext();
bool takevstuff();
bool takecorrespondenceset();
bool takecreatelink();
bool takefollowlink();
bool takecreatenewversion();
bool takecreatenewdocument();
bool takeretrievedocvspanset();
bool takeretrievedocvspan();
bool takeretrievev();
bool takefindlinksfromtothree();
bool takefindnumoflinksfromto();
bool takefindnextnlinksfromto();
bool takeretrieveendsets();
bool takeshowrelationof2versions();
bool takefinddocscontaining();
void drawboxaroundwindow();
long lastl();
bool attop();
long findnlinviewbeforehere();
long prevnlfind();
long findnlintext();
spantype * findlastspaninspec();
void findlinktype();
void findlinkspecset();
void finddocvsatojumpto();
void findlinkset();
void interactendset();
void findnextendsetafterspec();
void findnextendset();
void findspecspaninfromandtosetswithlowestvsa();
void findcorrectlink();
void interactlinkset();
void interactlinkset2();
void followcursorcontrol();
void convertspectorelatedspec();
void putcursoronspec();
nat * ealloc();
windowtype * windowalloc();
void windowfree();
spantype * spanalloc();
void spanfree();
spectype * specalloc();
spectype * specspanalloc();
void specfree();
charspantype * charspanalloc();
void charspanfree();
documenttype * documentalloc();
void documentfree();
med * taskalloc();
char * talloc();
void tfree();
void freecorrespondencelist();
docrangetype * docrangealloc();
void docrangefree();
tumbleritemtype * tumbleritemalloc();
maskspectype * maskspecalloc();
void displaymaskfree();
void tumbleralloc();
void tumblerfree();
viewtype * viewalloc();
void get_specsetfordisplacementinview();
void getspecsetfordisplacementinviewinwindow();
long getspaninviewinwindow();
long makespanfromviewspan();
void getuserrequest();
nat x_to_col();
nat y_to_row();
nat col_to_x();
nat row_to_y();
void getgraphicscreensize();
void decideifwindow();
void winblockmove();
void winblockclear();
void lineclipped();
void graphbox();
void init();
void copyvpositionintospec();
void copyspecintovposition();
med findbottomfield();
med findlastplace();
tdigit getcontentoflastplace();
tdigit getcontentofsmallbottomfield();
void quit();
void closeupshop();
void clearvdisplacement();
void cleardocid();
void filllinewithblanks();
void printblanks();
void inittask();
void pushc();
nat fegetc();
char pullc();
void pullblock();
void curlupanddye();
void initterm();
bool isinsertdeletechar();
bool glyph();
void interactivelyaccumulatestring();
void accumulatestring();
med interact();
void processuserrequest();
void changefromset();
void changetoset();
void createlink();
void changedocument();
void changedocument2();
void paralleltextface();
void interactlinktype();
void maketempthreeset();
void followlink();
void actuallyfollowlink();
void jumptofootnotelink();
void jumptomarginalnotelink();
void jumptojumplink();
void showlinks();
med spanvsacmp();
void putindexdocumentonstack();
vmthingtype * nthiteminlist();
void copyspecset();
void copyspanset();
bool issomeoneschild();
void canvas_selected();
void clearscreen();
void mumbleinit();
void mumble();
void mumblequit();
void displayithlineinwindowwithmask();
med speccmp();
void fillupmask();
void putspansonlineintomask();
bool retrievedocendsets();
bool findendsetsinview();
void findcomonspecset();
bool findcommonspans();
bool intersectspans();
void putendsetsinview();
void clearmask();
void maskset();
med selectmenu();
void initmenu();
void fillmenu();
void fillmenuwindow();
bool scrollmenu();
void scrollmenuup();
void scrollmenudown();
void homemenuup();
void homemenudown();
void menubottom();
metachar getmenucontrol();
void selectmenuline();
void deselectmenuline();
metachar menuerror();
med selectstructmenu();
void initstructmenu();
void fillstructmenu();
void fillstructmenuwindow();
bool scrollstructmenu();
void scrollstructmenuup();
void scrollstructmenudown();
void homestructmenuup();
void homestructmenudown();
void structmenubottom();
metachar getstructmenucontrol();
void selectstructmenuline();
void deselectstructmenuline();
metachar structmenuerror();
void  initmenuarrays();
void makemenu();
void retrievelinksetfrombackend();
void retrieveendsetfrombackend();
void retrieveendsetswithinspecsetfrombackend();
void retrievefrombackend();
void tellbackendtoquit();
void inserttextinbackend();
void deletefrombackend();
void createnewdocumentinbackend();
void createnewversioninbackend();
void createlinkinbackend();
void rearrangeinbackend();
void finddocscontaininginbackend();
void showrelationof2versionsinbackend();
/*	These two are static in minxface.c
void possiblyopenfromspec();
tumbler possiblyopen();
*/
long nextl();
long findnlinviewafterhere();
long nextnlfind();
void normal_cursor();
metachar functionofchartypeahead();
metachar nonescapeparseescape();
metachar getchartypeahead();
metachar escapeOparseesc();
metachar escapesquarebracketparseescape();
void getcursor();
void homecursorposition();
void homedowncursorposition();
void putcursor();
void placecursor();
void movecursor();
void cursorposition();
void fescroll();
void scrolldown();
void scrolllotsdown();
void scrollup();
long grabnextlineup();
long determinespecsetfornextlineup();
med grabnextlinedown();
void determinespecsetfornextlinedown();
void grabmask();
med grabspec();
void grabspecwithouttext();
void changedisplacement();
void setdisplacement();
void extendviewinwindow();
long makelistfordocumentmenu();
long makelistforlinkmenu();
void copystringwithoutwhitespace();
void freestringlist();
void feputc();
void feputstring();
void sendrequestbuffer();
void prompt();
void error();
void sendnum();
void sendnumber();
void sendtumbler();
void sendsmalltumbler();
void dosendtumbler();
void sendtextset();
void sendtext();
void sendspecset();
void sendspec();
void sendspanset();
void sendspan();
void sendlinkrestriction();
void sendnorestriction();
void senddocrangeset();
void senddocrange();
void sendinsert();
void sendretrievedocvspanset();
void sendcopy();
void sendrearrange();
void sendcreatelink();
void sendretrievev();
void sendfindnumoflinksfromtothree();
void sendfindlinksfromtothree();
void sendfindnextnlinksfromtothree();
void sendcreatenewdocument();
void senddeletevspan();
void sendcreatenewversion();
void sendretrievedocvspan();
void sendsetdebug();
void senddiskexit();
void sendfollowlink();
void sendappend();
void sendfinddocscontaining();
void sendretrieveendsets();
void sendshowrelationof2versions();
void sendaccount();
void sendprotocol();
void returnfromstack();
void returnfromstack2();
med firstofparalleltextface();
med interactstackreturn();
med makelistforstackmenu();
void pushwindow();
void pulllink();
void freeupcurrentwindowslinkset();
void decideifwindow();
void getgraphicscreensize();
void winblockclear();
void winblockmove();
void graphbox();
void pw_char();
void scrlsubwindow();
void determinescreendimensions();
void getandsetxy();
bool comparestrings();
/*
void hline();
void vline();
/* conflicts with curses.h 1998/04/29 ADP */
void changedisplayattributes();
void setautoxoff();
void clearautoxoff();
void deleteline();
void erasescreen();
void erasefromcursor();
void eraseol();
void erasebol();
void insertline();
void gotoxy();
void drawcurs();
void textplot();
/* void beep(); /* conflicts with curses.h 1998/04/29 ADP */
void tumbleradd();
void tumblersub();
void absadd();
void strongsub();
void weaksub();
long tumblerintdiff();
void tumblerincrement();
void tumblercopy();
void tumblermin();
void tumblermax();
void tumblertruncate();
void prefixtumbler();
void beheadtumbler();
void tumblerclear();
void smalltumblerclear();
void zdumptumbler();
void tumblerjustify();
void checktypeahead();
void makecharspanintotext();
void splitspan();
void inserttextincharspanindocument();
void deletetextfromdocumentinvm();
void fixvsasforrestofcharspansindocument();
void adjustendsetlist();
void jumpwindowcontrol();
void initcurrentwindow();
void paintwindowplain();
med tumblercmp();
med abscmp();
med abscmpsmall();
void vmfree();
void reap();
void askuserforstring();
charspantype *newcharspaninvm();
void fillwindow();
void gerror();
bool besureistypeahead();
void clearlineinwindow();
void cooked();
void rraw();
void setdisplaystyle();
void showkeydefs();
void createversion();
bool charspansarecontiguous();
bool tumblereq();
med smalltumblercmp();
long lastdigitintumbler();
bool istypeahead();
med fillithline();
documenttype *putdocumentinvm();
bool takeopen();
bool takeprotocol();
char * malloc();
med retrievetextsize();
